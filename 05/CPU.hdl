// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    //Decode
    Or16(a=false, b=instruction, out=Ainst);
    And16(a=false, b=instruction, out=Cinst);
    Mux16(a=Cinst, b=Ainst, sel=instruction[15], out=instCopy);
    
    //Parsing or decoding, essentially creates a copy of instruction
    Or16(a=instCopy, b=false, out[15]=i, out[12]=a, out[11]=Czx, out[10]=Cnx, out[9]=Czy, out[8]=Cny, out[7]=Cf, out[6]=Cno, out[5]=d1, out[4]=d2, out[3]=writeM, out[2]=j1, out[1]=j2, out[0]=j3);
    
    
    Mux16(a=instruction, b=dIn, sel=d1, out=inst);
    Not(in=i, out=noti);
    Mux(a=noti, b=d1, sel=i, out=noti2);//
    ARegister(in=inst, load=noti2, out=aReg, out[0..14]=addressM);
    Mux16(a=aReg, b=inM, sel=a, out=AoM);
    
    //ALU implementation using the 6 control bits address[6..11]
    ALU(x=dReg, y=AoM, zx=Czx, nx=Cnx, zy=Czy, ny=Cny, f=Cf, no=Cno, out=dIn, out=outM, zr=zero, ng=negate);
    DRegister(in=dIn, load=d2, out=dReg);
    
    //jump implementation
    And(a=zero, b=j2, out=JEQ);
    And(a=negate, b=j1, out=JLT);
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=zero, b=negate, out=eit);
    Not(in=eit, out=Neit);
    And(a=Neit, b=j3, out=Neith);
    Or(a=JLE, b=Neith, out=jNull);
    
    //Makes sure that there is no input from j<0 || j=0
    DMux(in=true, sel=jNull, a=dM1, b=dM2);
    
    //Program counter
    PC(in=aReg, load=dM2, inc=dM1, reset=reset, out[0..14]=pc);
}
